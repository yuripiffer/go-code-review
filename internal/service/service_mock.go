// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"sync"

	"coupon_service/internal/entity"
)

// Ensure, that CouponServiceMock does implement CouponService.
// If this is not the case, regenerate this file with moq.
var _ CouponService = &CouponServiceMock{}

// CouponServiceMock is a mock implementation of CouponService.
//
//	func TestSomethingThatUsesCouponService(t *testing.T) {
//
//		// make and configure a mocked CouponService
//		mockedCouponService := &CouponServiceMock{
//			ApplyCouponFunc: func(code string, value int) (entity.Basket, error) {
//				panic("mock out the ApplyCoupon method")
//			},
//			CreateCouponFunc: func(code string, discount int, minBasketValue int) error {
//				panic("mock out the CreateCoupon method")
//			},
//			GetCouponsFunc: func(strings []string) ([]entity.Coupon, error) {
//				panic("mock out the GetCoupons method")
//			},
//		}
//
//		// use mockedCouponService in code that requires CouponService
//		// and then make assertions.
//
//	}
type CouponServiceMock struct {
	// ApplyCouponFunc mocks the ApplyCoupon method.
	ApplyCouponFunc func(code string, value int) (entity.Basket, error)

	// CreateCouponFunc mocks the CreateCoupon method.
	CreateCouponFunc func(code string, discount int, minBasketValue int) error

	// GetCouponsFunc mocks the GetCoupons method.
	GetCouponsFunc func(strings []string) ([]entity.Coupon, error)

	// calls tracks calls to the methods.
	calls struct {
		// ApplyCoupon holds details about calls to the ApplyCoupon method.
		ApplyCoupon []struct {
			// Code is the code argument value.
			Code string
			// Value is the value argument value.
			Value int
		}
		// CreateCoupon holds details about calls to the CreateCoupon method.
		CreateCoupon []struct {
			// Code is the code argument value.
			Code string
			// Discount is the discount argument value.
			Discount int
			// MinBasketValue is the minBasketValue argument value.
			MinBasketValue int
		}
		// GetCoupons holds details about calls to the GetCoupons method.
		GetCoupons []struct {
			// Strings is the strings argument value.
			Strings []string
		}
	}
	lockApplyCoupon  sync.RWMutex
	lockCreateCoupon sync.RWMutex
	lockGetCoupons   sync.RWMutex
}

// ApplyCoupon calls ApplyCouponFunc.
func (mock *CouponServiceMock) ApplyCoupon(code string, value int) (entity.Basket, error) {
	callInfo := struct {
		Code  string
		Value int
	}{
		Code:  code,
		Value: value,
	}
	mock.lockApplyCoupon.Lock()
	mock.calls.ApplyCoupon = append(mock.calls.ApplyCoupon, callInfo)
	mock.lockApplyCoupon.Unlock()
	if mock.ApplyCouponFunc == nil {
		var (
			basketOut entity.Basket
			errOut    error
		)
		return basketOut, errOut
	}
	return mock.ApplyCouponFunc(code, value)
}

// ApplyCouponCalls gets all the calls that were made to ApplyCoupon.
// Check the length with:
//
//	len(mockedCouponService.ApplyCouponCalls())
func (mock *CouponServiceMock) ApplyCouponCalls() []struct {
	Code  string
	Value int
} {
	var calls []struct {
		Code  string
		Value int
	}
	mock.lockApplyCoupon.RLock()
	calls = mock.calls.ApplyCoupon
	mock.lockApplyCoupon.RUnlock()
	return calls
}

// CreateCoupon calls CreateCouponFunc.
func (mock *CouponServiceMock) CreateCoupon(code string, discount int, minBasketValue int) error {
	callInfo := struct {
		Code           string
		Discount       int
		MinBasketValue int
	}{
		Code:           code,
		Discount:       discount,
		MinBasketValue: minBasketValue,
	}
	mock.lockCreateCoupon.Lock()
	mock.calls.CreateCoupon = append(mock.calls.CreateCoupon, callInfo)
	mock.lockCreateCoupon.Unlock()
	if mock.CreateCouponFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.CreateCouponFunc(code, discount, minBasketValue)
}

// CreateCouponCalls gets all the calls that were made to CreateCoupon.
// Check the length with:
//
//	len(mockedCouponService.CreateCouponCalls())
func (mock *CouponServiceMock) CreateCouponCalls() []struct {
	Code           string
	Discount       int
	MinBasketValue int
} {
	var calls []struct {
		Code           string
		Discount       int
		MinBasketValue int
	}
	mock.lockCreateCoupon.RLock()
	calls = mock.calls.CreateCoupon
	mock.lockCreateCoupon.RUnlock()
	return calls
}

// GetCoupons calls GetCouponsFunc.
func (mock *CouponServiceMock) GetCoupons(strings []string) ([]entity.Coupon, error) {
	callInfo := struct {
		Strings []string
	}{
		Strings: strings,
	}
	mock.lockGetCoupons.Lock()
	mock.calls.GetCoupons = append(mock.calls.GetCoupons, callInfo)
	mock.lockGetCoupons.Unlock()
	if mock.GetCouponsFunc == nil {
		var (
			couponsOut []entity.Coupon
			errOut     error
		)
		return couponsOut, errOut
	}
	return mock.GetCouponsFunc(strings)
}

// GetCouponsCalls gets all the calls that were made to GetCoupons.
// Check the length with:
//
//	len(mockedCouponService.GetCouponsCalls())
func (mock *CouponServiceMock) GetCouponsCalls() []struct {
	Strings []string
} {
	var calls []struct {
		Strings []string
	}
	mock.lockGetCoupons.RLock()
	calls = mock.calls.GetCoupons
	mock.lockGetCoupons.RUnlock()
	return calls
}
