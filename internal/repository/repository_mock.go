// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"sync"

	"coupon_service/internal/entity"
)

// Ensure, that CouponRepositoryMock does implement CouponRepository.
// If this is not the case, regenerate this file with moq.
var _ CouponRepository = &CouponRepositoryMock{}

// CouponRepositoryMock is a mock implementation of CouponRepository.
//
//	func TestSomethingThatUsesCouponRepository(t *testing.T) {
//
//		// make and configure a mocked CouponRepository
//		mockedCouponRepository := &CouponRepositoryMock{
//			FindByCodeFunc: func(s string) (entity.Coupon, error) {
//				panic("mock out the FindByCode method")
//			},
//			SaveFunc: func(coupon entity.Coupon) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedCouponRepository in code that requires CouponRepository
//		// and then make assertions.
//
//	}
type CouponRepositoryMock struct {
	// FindByCodeFunc mocks the FindByCode method.
	FindByCodeFunc func(s string) (entity.Coupon, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(coupon entity.Coupon) error

	// calls tracks calls to the methods.
	calls struct {
		// FindByCode holds details about calls to the FindByCode method.
		FindByCode []struct {
			// S is the s argument value.
			S string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Coupon is the coupon argument value.
			Coupon entity.Coupon
		}
	}
	lockFindByCode sync.RWMutex
	lockSave       sync.RWMutex
}

// FindByCode calls FindByCodeFunc.
func (mock *CouponRepositoryMock) FindByCode(s string) (entity.Coupon, error) {
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockFindByCode.Lock()
	mock.calls.FindByCode = append(mock.calls.FindByCode, callInfo)
	mock.lockFindByCode.Unlock()
	if mock.FindByCodeFunc == nil {
		var (
			couponOut entity.Coupon
			errOut    error
		)
		return couponOut, errOut
	}
	return mock.FindByCodeFunc(s)
}

// FindByCodeCalls gets all the calls that were made to FindByCode.
// Check the length with:
//
//	len(mockedCouponRepository.FindByCodeCalls())
func (mock *CouponRepositoryMock) FindByCodeCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockFindByCode.RLock()
	calls = mock.calls.FindByCode
	mock.lockFindByCode.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *CouponRepositoryMock) Save(coupon entity.Coupon) error {
	callInfo := struct {
		Coupon entity.Coupon
	}{
		Coupon: coupon,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	if mock.SaveFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.SaveFunc(coupon)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedCouponRepository.SaveCalls())
func (mock *CouponRepositoryMock) SaveCalls() []struct {
	Coupon entity.Coupon
} {
	var calls []struct {
		Coupon entity.Coupon
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
